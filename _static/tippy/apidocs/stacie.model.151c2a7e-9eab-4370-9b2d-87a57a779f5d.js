selector_to_html = {"a[href=\"#stacie.model.SpectrumModel.sample_nonlinear_pars\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.sample_nonlinear_pars\">\n<span class=\"sig-name descname\"><span class=\"pre\">sample_nonlinear_pars</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">budget</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.sample_nonlinear_pars\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return samples of the nonlinear parameters.</p></dd>", "a[href=\"#module-stacie.model\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">stacie.model module<a class=\"headerlink\" href=\"#module-stacie.model\" title=\"Link to this heading\">\u00b6</a></h1><p>Models to fit the low-frequency part of the spectrum.</p>", "a[href=\"#stacie.model.PadeModel.par_scales\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.par_scales\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">par_scales</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><span class=\"pre\">ndarray</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><span class=\"pre\">tuple</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><span class=\"pre\">Any</span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><span class=\"pre\">dtype</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#float\" title=\"(in Python v3.14)\"><span class=\"pre\">float</span></a><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></em></dt><dd><p>Return the scales of the parameters and the cost function.</p></dd>", "a[href=\"#stacie.model.PadeModel.bounds\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.bounds\">\n<span class=\"sig-name descname\"><span class=\"pre\">bounds</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#PadeModel.bounds\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return parameter bounds for the optimizer.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.scales\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.scales\">\n<span class=\"sig-name descname\"><span class=\"pre\">scales</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a><span class=\"pre\">,</span> <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#float\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">float</span></code></a><span class=\"pre\">]</span></em></dt><dd><p>A dictionary with essential scale information for the parameters and the cost function.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.which_invalid\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.which_invalid\">\n<span class=\"sig-name descname\"><span class=\"pre\">which_invalid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.which_invalid\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return a boolean mask for the parameters outside the feasible region.</p></dd>", "a[href=\"#stacie.model.PadeModel.compute\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.compute\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"keyword-only-separator o\"><abbr title=\"Keyword-only parameters separator (PEP 3102)\"><span class=\"pre\">*</span></abbr></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">deriv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#PadeModel.compute\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>See <a class=\"reference internal\" href=\"#stacie.model.SpectrumModel.compute\" title=\"stacie.model.SpectrumModel.compute\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">SpectrumModel.compute()</span></code></a>.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.par_scales\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.par_scales\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">par_scales</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><span class=\"pre\">ndarray</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><span class=\"pre\">tuple</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><span class=\"pre\">Any</span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><span class=\"pre\">dtype</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#float\" title=\"(in Python v3.14)\"><span class=\"pre\">float</span></a><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></em></dt><dd><p>Return the scales of the parameters and the cost function.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">ExpPolyModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">degrees</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#ExpPolyModel\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Bases: <a class=\"reference internal\" href=\"#stacie.model.SpectrumModel\" title=\"stacie.model.SpectrumModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SpectrumModel</span></code></a></p><p>Exponential function of a linear combination of simple monomials.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.par_scales\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.par_scales\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">par_scales</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><span class=\"pre\">ndarray</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><span class=\"pre\">tuple</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><span class=\"pre\">Any</span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><span class=\"pre\">dtype</span></a><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#float\" title=\"(in Python v3.14)\"><span class=\"pre\">float</span></a><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></em></dt><dd><p>Return the scales of the parameters and the cost function.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.bounds\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.bounds\">\n<span class=\"sig-name descname\"><span class=\"pre\">bounds</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#ExpPolyModel.bounds\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return parameter bounds for the optimizer.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.get_par_nonlinear\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.get_par_nonlinear\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_par_nonlinear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#ExpPolyModel.get_par_nonlinear\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return a boolean mask for the nonlinear parameters.</p></dd>", "a[href=\"#stacie.model.PadeModel.derive_props\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.derive_props\">\n<span class=\"sig-name descname\"><span class=\"pre\">derive_props</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">covar</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#PadeModel.derive_props\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return autocorrelation integral (and other properties) derived from the parameters.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.neglog_prior\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.neglog_prior\">\n<span class=\"sig-name descname\"><span class=\"pre\">neglog_prior</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"keyword-only-separator o\"><abbr title=\"Keyword-only parameters separator (PEP 3102)\"><span class=\"pre\">*</span></abbr></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">deriv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.neglog_prior\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Minus logarithm of the prior probability density function, if any.</p><p>Subclasses may implement (a very weak) prior, if any.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.name\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.name\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">name</span></span></dt><dd></dd>", "a[href=\"#stacie.model.LorentzModel\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.LorentzModel\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">LorentzModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">relerr_threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.1</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#LorentzModel\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Bases: <a class=\"reference internal\" href=\"#stacie.model.PadeModel\" title=\"stacie.model.PadeModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PadeModel</span></code></a></p><p>A model for the spectrum with a Lorentzian peak at zero frequency plus some white noise.</p><p>This is a special case of the PadeModel with\n<cite>numer_degrees</cite> = [0, 2] and <cite>denom_degrees</cite> = [2].\nFurthermore, it will only accept parameters that correspond\nto a well-defined exponential correlation time.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.npar\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.npar\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">npar</span></span></dt><dd><p>Return the number of parameters.</p></dd>", "a[href=\"#stacie.model.PadeModel\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">PadeModel</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">numer_degrees</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">denom_degrees</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#PadeModel\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Bases: <a class=\"reference internal\" href=\"#stacie.model.SpectrumModel\" title=\"stacie.model.SpectrumModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SpectrumModel</span></code></a></p><p>A rational function model for the spectrum, a.k.a. a Pad\u00e9 approximation.</p></dd>", "a[href=\"#stacie.model.PadeModel.get_par_nonlinear\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.get_par_nonlinear\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_par_nonlinear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#PadeModel.get_par_nonlinear\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return a boolean mask for the nonlinear parameters.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.compute\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.compute\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"keyword-only-separator o\"><abbr title=\"Keyword-only parameters separator (PEP 3102)\"><span class=\"pre\">*</span></abbr></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">deriv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#ExpPolyModel.compute\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>See <a class=\"reference internal\" href=\"#stacie.model.SpectrumModel.compute\" title=\"stacie.model.SpectrumModel.compute\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">SpectrumModel.compute()</span></code></a>.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.degrees\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.degrees\">\n<span class=\"sig-name descname\"><span class=\"pre\">degrees</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ndarray</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">Any</span></code></a><span class=\"pre\">,</span> <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#Ellipsis\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">...</span></code></a><span class=\"pre\">],</span> <a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dtype</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#int\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a><span class=\"pre\">]]</span></em></dt><dd><p>The degree of the monomials.</p></dd>", "a[href=\"#stacie.model.LorentzModel.numer_degrees\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.LorentzModel.numer_degrees\">\n<span class=\"sig-name descname\"><span class=\"pre\">numer_degrees</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ndarray</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">Any</span></code></a><span class=\"pre\">,</span> <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#Ellipsis\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">...</span></code></a><span class=\"pre\">],</span> <a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dtype</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#int\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a><span class=\"pre\">]]</span></em></dt><dd><p>The degrees of the monomials in the numerator.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.solve_linear\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.solve_linear\">\n<span class=\"sig-name descname\"><span class=\"pre\">solve_linear</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ndofs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">amplitudes</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weights</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nonlinear_pars</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#ExpPolyModel.solve_linear\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Use linear linear regression to solve a subset of the parameters.</p><p>This is a specialized implementation that rewrites the problem\nin a different form to solve all parameters with a linear regression.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.bounds\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.bounds\">\n<span class=\"sig-name descname\"><span class=\"pre\">bounds</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.bounds\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return parameter bounds for the optimizer.</p></dd>", "a[href=\"#stacie.model.LorentzModel.derive_props\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.LorentzModel.derive_props\">\n<span class=\"sig-name descname\"><span class=\"pre\">derive_props</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">covar</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#LorentzModel.derive_props\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return autocorrelation integral (and other properties) derived from the parameters.</p><p>The exponential correlation time is derived from the parameters, if possible.\nIf not, or if the variance of the estimate is too large,\nthe \u201ccriterion\u201d is set to infinity and the \u201cmsg\u201d is set accordingly,\nto discard the current fit from the average over the cutoff frequencies.</p></dd>", "a[href=\"#stacie.model.SpectrumModel\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">SpectrumModel</span></span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p><p>Abstract base class for spectrum models.</p><p>Subclasses must override all methods that raise <code class=\"docutils literal notranslate\"><span class=\"pre\">NotImplementedError</span></code>.</p><p>The first parameter must have a property that is used when constructing an initial guess:\nWhen the first parameter increases, the model should increase everywhere,\nand must allow for an arbitrary increase of the spectrum at all points.\nThis is used to repair initial guesses that result in a partially negative spectrum.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.configure_scales\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.configure_scales\">\n<span class=\"sig-name descname\"><span class=\"pre\">configure_scales</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">timestep</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">amplitudes</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.configure_scales\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Store essential scale information in the <code class=\"docutils literal notranslate\"><span class=\"pre\">scales</span></code> attribute.</p><p>Other methods may access this information,\nso this method should be called before performing any computations.</p></dd>", "a[href=\"#stacie.model.PadeModel.denom_degrees\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.denom_degrees\">\n<span class=\"sig-name descname\"><span class=\"pre\">denom_degrees</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ndarray</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">Any</span></code></a><span class=\"pre\">,</span> <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#Ellipsis\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">...</span></code></a><span class=\"pre\">],</span> <a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dtype</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#int\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a><span class=\"pre\">]]</span></em></dt><dd><p>The degrees of the monomials in the denominator.</p><p>Note that the leading term is always 1, and there is no need to include\ndegree zero.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.name\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.name\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">name</span></span></dt><dd></dd>", "a[href=\"#stacie.model.SpectrumModel.compute\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.compute\">\n<span class=\"sig-name descname\"><span class=\"pre\">compute</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"keyword-only-separator o\"><abbr title=\"Keyword-only parameters separator (PEP 3102)\"><span class=\"pre\">*</span></abbr></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">deriv</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.compute\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Compute the amplitudes of the spectrum model.</p></dd>", "a[href=\"#stacie.model.ExpPolyModel.derive_props\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.ExpPolyModel.derive_props\">\n<span class=\"sig-name descname\"><span class=\"pre\">derive_props</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">covar</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#ExpPolyModel.derive_props\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return autocorrelation integral (and other properties) derived from the parameters.</p></dd>", "a[href=\"#stacie.model.PadeModel.npar\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.npar\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">npar</span></span></dt><dd><p>Return the number of parameters.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.derive_props\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.derive_props\">\n<span class=\"sig-name descname\"><span class=\"pre\">derive_props</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">covar</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.derive_props\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return autocorrelation integral (and other properties) derived from the parameters.</p></dd>", "a[href=\"#stacie.model.PadeModel.name\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.name\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">name</span></span></dt><dd></dd>", "a[href=\"#stacie.model.LorentzModel.name\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.LorentzModel.name\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">name</span></span></dt><dd></dd>", "a[href=\"#stacie.model.PadeModel.numer_degrees\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.numer_degrees\">\n<span class=\"sig-name descname\"><span class=\"pre\">numer_degrees</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ndarray</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">Any</span></code></a><span class=\"pre\">,</span> <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#Ellipsis\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">...</span></code></a><span class=\"pre\">],</span> <a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dtype</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#int\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a><span class=\"pre\">]]</span></em></dt><dd><p>The degrees of the monomials in the numerator.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.npar\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.npar\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">property</span></span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">npar</span></span></dt><dd><p>Return the number of parameters.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.get_par_nonlinear\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.get_par_nonlinear\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_par_nonlinear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.get_par_nonlinear\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return a boolean mask for the nonlinear parameters.</p><p>The returned parameters cannot be solved with the solve_linear method.\nModels are free to decide which parameters can be solved with linear regression.\nFor example, some non-linear parameters may be solved with a linear regression\nafter rewriting the regression problem in a different form.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.valid\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.valid\">\n<span class=\"sig-name descname\"><span class=\"pre\">valid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pars</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.valid\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> when the parameters are within the feasible region.</p></dd>", "a[href=\"#stacie.model.SpectrumModel.solve_linear\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.SpectrumModel.solve_linear\">\n<span class=\"sig-name descname\"><span class=\"pre\">solve_linear</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ndofs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">amplitudes</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weights</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nonlinear_pars</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#SpectrumModel.solve_linear\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Use linear linear regression to solve a subset of the parameters.</p><p>The default implementation in the base class assumes that the linear parameters\nare genuinely linear without rewriting the regression problem in a different form.</p></dd>", "a[href=\"#stacie.model.LorentzModel.relerr_threshold\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.LorentzModel.relerr_threshold\">\n<span class=\"sig-name descname\"><span class=\"pre\">relerr_threshold</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#float\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">float</span></code></a></em></dt><dd><p>A threshold for the relative error on the exponential correlation time.</p><p>The relative error is defined as ratio of the standard deviation\nto the mean of the correlation time.</p><p>To accept the current cutoff frequency, the relative error must be below this threshold.\nThis eliminates high-variance cases for which the maximum a posteriori estimate\ntends to be a poor approximation.</p></dd>", "a[href=\"#stacie.model.LorentzModel.denom_degrees\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.LorentzModel.denom_degrees\">\n<span class=\"sig-name descname\"><span class=\"pre\">denom_degrees</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ndarray</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Any\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">Any</span></code></a><span class=\"pre\">,</span> <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#Ellipsis\" title=\"(in Python v3.14)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">...</span></code></a><span class=\"pre\">],</span> <a class=\"reference external\" href=\"https://numpy.org/doc/stable/reference/generated/numpy.dtype.html#numpy.dtype\" title=\"(in NumPy v2.3)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dtype</span></code></a><span class=\"pre\">[</span><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#int\" title=\"(in Python v3.14)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a><span class=\"pre\">]]</span></em></dt><dd><p>The degrees of the monomials in the denominator.</p><p>Note that the leading term is always 1, and there is no need to include\ndegree zero.</p></dd>", "a[href=\"#stacie.model.PadeModel.solve_linear\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.PadeModel.solve_linear\">\n<span class=\"sig-name descname\"><span class=\"pre\">solve_linear</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ndofs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">amplitudes</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weights</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nonlinear_pars</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#PadeModel.solve_linear\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Use linear linear regression to solve a subset of the parameters.</p><p>This is a specialized implementation that rewrites the problem\nin a different form to solve all parameters with a linear regression.</p></dd>", "a[href=\"#stacie.model.guess\"]": "<dt class=\"sig sig-object py\" id=\"stacie.model.guess\">\n<span class=\"sig-name descname\"><span class=\"pre\">guess</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">freqs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ndofs</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">amplitudes</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">weights</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nonlinear_budget</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/stacie/model.html#guess\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Guess initial values of the parameters for a model.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
